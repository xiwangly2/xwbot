name: Build And Push Docker Image

on:
  push:
    branches:
      - 'main'
      - 'dev'
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义平台与标签的合法映射
        include:
          - platform: linux/amd64
            tag_suffix: linux-amd64
          - platform: linux/arm64
            tag_suffix: linux-arm64
          - platform: linux/arm/v7
            tag_suffix: linux-armv7
          - platform: linux/ppc64le
            tag_suffix: linux-ppc64le
          - platform: linux/s390x
            tag_suffix: linux-s390x
          - platform: linux/arm/v5
            tag_suffix: linux-armv5

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create builder
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master

      - name: Build and push (per-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ matrix.tag_suffix }}
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  merge-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          # 定义标签映射关系
          declare -A arch_map=(
            ["linux/amd64"]="linux-amd64"
            ["linux/arm64"]="linux-arm64"
            ["linux/arm/v7"]="linux-armv7"
            ["linux/ppc64le"]="linux-ppc64le"
            ["linux/s390x"]="linux-s390x"
            ["linux/arm/v5"]="linux-armv5"
          )

          # 拉取所有架构镜像
          for platform in "${!arch_map[@]}"; do
            tag=${arch_map[$platform]}
            docker pull ghcr.io/${{ github.repository }}:${tag}
          done

          # 创建 Manifest
          docker manifest create ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:linux-amd64 \
            ghcr.io/${{ github.repository }}:linux-arm64 \
            ghcr.io/${{ github.repository }}:linux-armv7 \
            ghcr.io/${{ github.repository }}:linux-ppc64le \
            ghcr.io/${{ github.repository }}:linux-s390x \
            ghcr.io/${{ github.repository }}:linux-armv5

          docker manifest push ghcr.io/${{ github.repository }}:latest